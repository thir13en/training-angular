{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let HighlightDirective = /*#__PURE__*/(() => {\n  class HighlightDirective {\n    constructor() {\n      this.isHighlighted = false; // directives can also emit events\n\n      this.highlightChanged = new EventEmitter();\n    } // you need to apply a typescript getter method in order for this host binding to work\n    // this adds always a classname highlighted\n    // @HostBinding('className')\n    // get cssClasses() {\n    //   return 'highlighted';\n    // }\n\n\n    get cssClasses() {\n      return this.isHighlighted;\n    } // to write to native html attributes\n\n\n    get isDisabled() {\n      return true;\n    }\n\n    handleClick($event) {\n      this.toggle();\n    } // lets suppose that this method is thought out to be used for third party components\n\n\n    toggle() {\n      this.isHighlighted = !this.isHighlighted;\n    }\n\n  }\n\n  HighlightDirective.ɵfac = function HighlightDirective_Factory(t) {\n    return new (t || HighlightDirective)();\n  };\n\n  HighlightDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: HighlightDirective,\n    selectors: [[\"\", \"appHighlight\", \"\"]],\n    hostVars: 3,\n    hostBindings: function HighlightDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function HighlightDirective_click_HostBindingHandler($event) {\n          return ctx.handleClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵattribute(\"disabled\", ctx.isDisabled);\n        i0.ɵɵclassProp(\"highlighted\", ctx.cssClasses);\n      }\n    },\n    inputs: {\n      isHighlighted: [\"appHighlight\", \"isHighlighted\"]\n    },\n    outputs: {\n      highlightChanged: \"highlightChanged\"\n    },\n    exportAs: [\"hl\"]\n  });\n  return HighlightDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}