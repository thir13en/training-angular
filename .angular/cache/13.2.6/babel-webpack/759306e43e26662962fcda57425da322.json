{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map, take, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let UIStateService = /*#__PURE__*/(() => {\n  class UIStateService {\n    constructor() {\n      this.current$ = new BehaviorSubject({\n        sidenavOpened: true\n      });\n    }\n\n    get sidenavOpened$() {\n      return this.current$.asObservable().pipe(map(currentState => currentState.sidenavOpened));\n    }\n\n    toggleSidenav() {\n      this.sidenavOpened$.pipe(take(1), map(sidenavOpened => !sidenavOpened), tap(sidenavOpened => {\n        const newState = Object.assign(Object.assign({}, this.current$.getValue()), {\n          sidenavOpened\n        });\n        this.current$.next(newState);\n      })).subscribe();\n    }\n\n  }\n\n  UIStateService.ɵfac = function UIStateService_Factory(t) {\n    return new (t || UIStateService)();\n  };\n\n  UIStateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UIStateService,\n    factory: UIStateService.ɵfac,\n    providedIn: 'root'\n  });\n  return UIStateService;\n})();","map":null,"metadata":{},"sourceType":"module"}